# OS-csa0438
Pro 1
1.Include necessary headers (e.g., <stdio.h>, <unistd.h>).

2. Create a variable to store the process ID (PID).

3. Use the `fork` system call to create a new child process:
   - If PID is negative, an error occurred.
   - If PID is 0, you are in the child process.
   - If PID is positive, you are in the parent process, and PID represents the child's PID.

4. In the parent process, you can perform tasks specific to the parent, and in the child process, you can perform tasks specific to the child.

5. Both the parent and child processes will continue to execute from this point in the code.

6. To distinguish between the parent and child processes, you can check the value of PID.

7. Remember to handle errors, close unnecessary file descriptors, and exit the processes as needed.

8. Example code for a simple fork usage:
