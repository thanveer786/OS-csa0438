1)Initialize data structures to store process information, such as arrival time, burst time, priority, completion time, turnaround time, and waiting time.

2)Input the number of processes (n).

3)For each process i from 1 to n, do:

a. Input the arrival time, burst time, and priority of the process.

b. Initialize the burst time for process i.

c. Calculate the total burst time (total_burst_time) by summing up the burst times of all processes.

4)Initialize the current time (current_time) to 0.

5)While current_time is less than total_burst_time, do:

a.Find the process with the highest priority among the processes that have arrived and have remaining burst time (use the findHighestPriority function):

i. Initialize highest_priority to -1 and highest_priority_process to -1.

ii. For each process i from 1 to n, do:

If the process has arrived (arrival_time <= current_time) and has remaining burst time (burst_time > 0):

If the process's priority is higher than the current highest_priority or if highest_priority is -1 (indicating the first process found), update highest_priority and highest_priority_process.

iii. highest_priority_process now represents the process to be executed next.

b. If no process is found in step 5a, increment current_time by 1 (idle CPU time).

c. If a process is found in step 5a, execute it by decrementing its burst time by 1 and updating current_time.

i. If the process's burst time becomes 0, calculate its completion time, turnaround time, and waiting time.

6)Display the process details, including their arrival time, burst time, priority, completion time, turnaround time, and waiting time for all processes
